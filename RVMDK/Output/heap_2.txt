; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Output\heap_2.o --depend=.\Output\heap_2.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\User -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\FreeRTOS\Source\include -I..\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\RVMDK -ID:\keil\ARM\INC -ID:\keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Output\heap_2.crf ..\FreeRTOS\Source\portable\MemMang\heap_2.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  prvHeapInit PROC
;;;279    
;;;280    static void prvHeapInit( void )
000000  4a43              LDR      r2,|L1.272|
;;;281    {
;;;282    BlockLink_t *pxFirstFreeBlock;
;;;283    uint8_t *pucAlignedHeap;
;;;284    
;;;285    	/* Ensure the heap starts on a correctly aligned boundary. */
;;;286    	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
000002  f0220007          BIC      r0,r2,#7
;;;287    
;;;288    	/* xStart is used to hold a pointer to the first item in the list of free
;;;289    	blocks.  The void cast is used to prevent compiler warnings. */
;;;290    	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
000006  4a43              LDR      r2,|L1.276|
000008  6010              STR      r0,[r2,#0]  ; xStart
;;;291    	xStart.xBlockSize = ( size_t ) 0;
00000a  2200              MOVS     r2,#0
00000c  4b41              LDR      r3,|L1.276|
00000e  605a              STR      r2,[r3,#4]  ; xStart
;;;292    
;;;293    	/* xEnd is used to mark the end of the list of free blocks. */
;;;294    	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
000010  f24432f8          MOV      r2,#0x43f8
000014  4b40              LDR      r3,|L1.280|
000016  605a              STR      r2,[r3,#4]  ; xEnd
;;;295    	xEnd.pxNextFreeBlock = NULL;
000018  2200              MOVS     r2,#0
00001a  601a              STR      r2,[r3,#0]  ; xEnd
;;;296    
;;;297    	/* To start with there is a single free block that is sized to take up the
;;;298    	entire heap space. */
;;;299    	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
00001c  4601              MOV      r1,r0
;;;300    	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
00001e  f24432f8          MOV      r2,#0x43f8
000022  604a              STR      r2,[r1,#4]
;;;301    	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
000024  461a              MOV      r2,r3
000026  600a              STR      r2,[r1,#0]
;;;302    }
000028  4770              BX       lr
;;;303    /*-----------------------------------------------------------*/
                          ENDP

                  pvPortMalloc PROC
;;;148    
;;;149    void *pvPortMalloc( size_t xWantedSize )
00002a  e92d41f0          PUSH     {r4-r8,lr}
;;;150    {
00002e  4604              MOV      r4,r0
;;;151    BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
;;;152    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
;;;153    void *pvReturn = NULL;
000030  f04f0800          MOV      r8,#0
;;;154    
;;;155    	vTaskSuspendAll();
000034  f7fffffe          BL       vTaskSuspendAll
;;;156    	{
;;;157    		/* If this is the first call to malloc then the heap will require
;;;158    		initialisation to setup the list of free blocks. */
;;;159    		if( xHeapHasBeenInitialised == pdFALSE )
000038  4838              LDR      r0,|L1.284|
00003a  6800              LDR      r0,[r0,#0]  ; xHeapHasBeenInitialised
00003c  b920              CBNZ     r0,|L1.72|
;;;160    		{
;;;161    			prvHeapInit();
00003e  f7fffffe          BL       prvHeapInit
;;;162    			xHeapHasBeenInitialised = pdTRUE;
000042  2001              MOVS     r0,#1
000044  4935              LDR      r1,|L1.284|
000046  6008              STR      r0,[r1,#0]  ; xHeapHasBeenInitialised
                  |L1.72|
;;;163    		}
;;;164    
;;;165    		/* The wanted size is increased so it can contain a BlockLink_t
;;;166    		structure in addition to the requested amount of bytes. */
;;;167    		if( xWantedSize > 0 )
000048  b144              CBZ      r4,|L1.92|
;;;168    		{
;;;169    			xWantedSize += heapSTRUCT_SIZE;
00004a  3408              ADDS     r4,r4,#8
;;;170    
;;;171    			/* Ensure that blocks are always aligned to the required number of bytes. */
;;;172    			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
00004c  f0140f07          TST      r4,#7
000050  d004              BEQ      |L1.92|
;;;173    			{
;;;174    				/* Byte alignment required. */
;;;175    				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
000052  f0040007          AND      r0,r4,#7
000056  f1c00008          RSB      r0,r0,#8
00005a  4404              ADD      r4,r4,r0
                  |L1.92|
;;;176    			}
;;;177    		}
;;;178    
;;;179    		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
00005c  b394              CBZ      r4,|L1.196|
00005e  f24430f8          MOV      r0,#0x43f8
000062  4284              CMP      r4,r0
000064  d22e              BCS      |L1.196|
;;;180    		{
;;;181    			/* Blocks are stored in byte order - traverse the list from the start
;;;182    			(smallest) block until one of adequate size is found. */
;;;183    			pxPreviousBlock = &xStart;
000066  4f2b              LDR      r7,|L1.276|
;;;184    			pxBlock = xStart.pxNextFreeBlock;
000068  4638              MOV      r0,r7
00006a  6805              LDR      r5,[r0,#0]  ; xStart
;;;185    			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
00006c  e001              B        |L1.114|
                  |L1.110|
;;;186    			{
;;;187    				pxPreviousBlock = pxBlock;
00006e  462f              MOV      r7,r5
;;;188    				pxBlock = pxBlock->pxNextFreeBlock;
000070  682d              LDR      r5,[r5,#0]
                  |L1.114|
000072  6868              LDR      r0,[r5,#4]            ;185
000074  42a0              CMP      r0,r4                 ;185
000076  d202              BCS      |L1.126|
000078  6828              LDR      r0,[r5,#0]            ;185
00007a  2800              CMP      r0,#0                 ;185
00007c  d1f7              BNE      |L1.110|
                  |L1.126|
;;;189    			}
;;;190    
;;;191    			/* If we found the end marker then a block of adequate size was not found. */
;;;192    			if( pxBlock != &xEnd )
00007e  4826              LDR      r0,|L1.280|
000080  4285              CMP      r5,r0
000082  d01f              BEQ      |L1.196|
;;;193    			{
;;;194    				/* Return the memory space - jumping over the BlockLink_t structure
;;;195    				at its start. */
;;;196    				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
000084  6838              LDR      r0,[r7,#0]
000086  f1000808          ADD      r8,r0,#8
;;;197    
;;;198    				/* This block is being returned for use so must be taken out of the
;;;199    				list of free blocks. */
;;;200    				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
00008a  6828              LDR      r0,[r5,#0]
00008c  6038              STR      r0,[r7,#0]
;;;201    
;;;202    				/* If the block is larger than required it can be split into two. */
;;;203    				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
00008e  6868              LDR      r0,[r5,#4]
000090  1b00              SUBS     r0,r0,r4
000092  2810              CMP      r0,#0x10
000094  d910              BLS      |L1.184|
;;;204    				{
;;;205    					/* This block is to be split into two.  Create a new block
;;;206    					following the number of bytes requested. The void cast is
;;;207    					used to prevent byte alignment warnings from the compiler. */
;;;208    					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
000096  192e              ADDS     r6,r5,r4
;;;209    
;;;210    					/* Calculate the sizes of two blocks split from the single
;;;211    					block. */
;;;212    					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
000098  6868              LDR      r0,[r5,#4]
00009a  1b00              SUBS     r0,r0,r4
00009c  6070              STR      r0,[r6,#4]
;;;213    					pxBlock->xBlockSize = xWantedSize;
00009e  606c              STR      r4,[r5,#4]
;;;214    
;;;215    					/* Insert the new block into the list of free blocks. */
;;;216    					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
0000a0  6871              LDR      r1,[r6,#4]
0000a2  481c              LDR      r0,|L1.276|
0000a4  e000              B        |L1.168|
                  |L1.166|
0000a6  6800              LDR      r0,[r0,#0]
                  |L1.168|
0000a8  6802              LDR      r2,[r0,#0]
0000aa  6852              LDR      r2,[r2,#4]
0000ac  428a              CMP      r2,r1
0000ae  d3fa              BCC      |L1.166|
0000b0  6802              LDR      r2,[r0,#0]
0000b2  6032              STR      r2,[r6,#0]
0000b4  6006              STR      r6,[r0,#0]
0000b6  bf00              NOP      
                  |L1.184|
;;;217    				}
;;;218    
;;;219    				xFreeBytesRemaining -= pxBlock->xBlockSize;
0000b8  4919              LDR      r1,|L1.288|
0000ba  6868              LDR      r0,[r5,#4]
0000bc  6809              LDR      r1,[r1,#0]  ; xFreeBytesRemaining
0000be  1a08              SUBS     r0,r1,r0
0000c0  4917              LDR      r1,|L1.288|
0000c2  6008              STR      r0,[r1,#0]  ; xFreeBytesRemaining
                  |L1.196|
;;;220    			}
;;;221    		}
;;;222    
;;;223    		traceMALLOC( pvReturn, xWantedSize );
;;;224    	}
;;;225    	( void ) xTaskResumeAll();
0000c4  f7fffffe          BL       xTaskResumeAll
;;;226    
;;;227    	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
;;;228    	{
;;;229    		if( pvReturn == NULL )
;;;230    		{
;;;231    			extern void vApplicationMallocFailedHook( void );
;;;232    			vApplicationMallocFailedHook();
;;;233    		}
;;;234    	}
;;;235    	#endif
;;;236    
;;;237    	return pvReturn;
0000c8  4640              MOV      r0,r8
;;;238    }
0000ca  e8bd81f0          POP      {r4-r8,pc}
;;;239    /*-----------------------------------------------------------*/
                          ENDP

                  vPortFree PROC
;;;240    
;;;241    void vPortFree( void *pv )
0000ce  b570              PUSH     {r4-r6,lr}
;;;242    {
0000d0  4606              MOV      r6,r0
;;;243    uint8_t *puc = ( uint8_t * ) pv;
0000d2  4635              MOV      r5,r6
;;;244    BlockLink_t *pxLink;
;;;245    
;;;246    	if( pv != NULL )
0000d4  b1b6              CBZ      r6,|L1.260|
;;;247    	{
;;;248    		/* The memory being freed will have an BlockLink_t structure immediately
;;;249    		before it. */
;;;250    		puc -= heapSTRUCT_SIZE;
0000d6  3d08              SUBS     r5,r5,#8
;;;251    
;;;252    		/* This unexpected casting is to keep some compilers from issuing
;;;253    		byte alignment warnings. */
;;;254    		pxLink = ( void * ) puc;
0000d8  462c              MOV      r4,r5
;;;255    
;;;256    		vTaskSuspendAll();
0000da  f7fffffe          BL       vTaskSuspendAll
;;;257    		{
;;;258    			/* Add this block to the list of free blocks. */
;;;259    			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
0000de  6861              LDR      r1,[r4,#4]
0000e0  480c              LDR      r0,|L1.276|
0000e2  e000              B        |L1.230|
                  |L1.228|
0000e4  6800              LDR      r0,[r0,#0]
                  |L1.230|
0000e6  6802              LDR      r2,[r0,#0]
0000e8  6852              LDR      r2,[r2,#4]
0000ea  428a              CMP      r2,r1
0000ec  d3fa              BCC      |L1.228|
0000ee  6802              LDR      r2,[r0,#0]
0000f0  6022              STR      r2,[r4,#0]
0000f2  6004              STR      r4,[r0,#0]
;;;260    			xFreeBytesRemaining += pxLink->xBlockSize;
0000f4  490a              LDR      r1,|L1.288|
0000f6  6860              LDR      r0,[r4,#4]
0000f8  6809              LDR      r1,[r1,#0]  ; xFreeBytesRemaining
0000fa  4408              ADD      r0,r0,r1
0000fc  4908              LDR      r1,|L1.288|
0000fe  6008              STR      r0,[r1,#0]  ; xFreeBytesRemaining
;;;261    			traceFREE( pv, pxLink->xBlockSize );
;;;262    		}
;;;263    		( void ) xTaskResumeAll();
000100  f7fffffe          BL       xTaskResumeAll
                  |L1.260|
;;;264    	}
;;;265    }
000104  bd70              POP      {r4-r6,pc}
;;;266    /*-----------------------------------------------------------*/
                          ENDP

                  xPortGetFreeHeapSize PROC
;;;267    
;;;268    size_t xPortGetFreeHeapSize( void )
000106  4806              LDR      r0,|L1.288|
;;;269    {
;;;270    	return xFreeBytesRemaining;
000108  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
;;;271    }
00010a  4770              BX       lr
;;;272    /*-----------------------------------------------------------*/
                          ENDP

                  vPortInitialiseBlocks PROC
;;;273    
;;;274    void vPortInitialiseBlocks( void )
00010c  4770              BX       lr
;;;275    {
;;;276    	/* This just exists to keep the linker quiet. */
;;;277    }
;;;278    /*-----------------------------------------------------------*/
                          ENDP

00010e  0000              DCW      0x0000
                  |L1.272|
                          DCD      ucHeap+0x8
                  |L1.276|
                          DCD      xStart
                  |L1.280|
                          DCD      xEnd
                  |L1.284|
                          DCD      xHeapHasBeenInitialised
                  |L1.288|
                          DCD      xFreeBytesRemaining

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ucHeap
                          %        17408

                          AREA ||.data||, DATA, ALIGN=2

                  xFreeBytesRemaining
                          DCD      0x000043f8
                  xHeapHasBeenInitialised
                          DCD      0x00000000
                  xStart
                          %        8
                  xEnd
                          %        8
