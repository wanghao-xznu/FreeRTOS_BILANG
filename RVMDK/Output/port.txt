; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Output\port.o --depend=.\Output\port.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\User -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\FreeRTOS\Source\include -I..\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\RVMDK -ID:\keil\ARM\INC -ID:\keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Output\port.crf ..\FreeRTOS\Source\portable\RVDS\ARM_CM3\port.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  prvTaskExitError PROC
;;;234    
;;;235    static void prvTaskExitError( void )
000000  f7fffffe          BL       ulPortSetInterruptMask
;;;236    {
;;;237    	/* A function that implements a task must not exit or attempt to return to
;;;238    	its caller as there is nothing to return to.  If a task wants to exit it
;;;239    	should instead call vTaskDelete( NULL ).
;;;240    
;;;241    	Artificially force an assert() to be triggered if configASSERT() is
;;;242    	defined, then stop here so application writers can catch the error. */
;;;243    	configASSERT( uxCriticalNesting == ~0UL );
;;;244    	portDISABLE_INTERRUPTS();
;;;245    	for( ;; );
000004  bf00              NOP      
                  |L1.6|
000006  e7fe              B        |L1.6|
;;;246    }
;;;247    /*-----------------------------------------------------------*/
                          ENDP

                  pxPortInitialiseStack PROC
;;;215     */
;;;216    StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
000008  1f00              SUBS     r0,r0,#4
;;;217    {
;;;218    	/* Simulate the stack frame as it would be created by a context switch
;;;219    	interrupt. */
;;;220    	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
;;;221    	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
00000a  f04f7380          MOV      r3,#0x1000000
00000e  6003              STR      r3,[r0,#0]
;;;222    	pxTopOfStack--;
000010  1f00              SUBS     r0,r0,#4
;;;223    	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
000012  6001              STR      r1,[r0,#0]
;;;224    	pxTopOfStack--;
000014  1f00              SUBS     r0,r0,#4
;;;225    	*pxTopOfStack = ( StackType_t ) prvTaskExitError;	/* LR */
000016  4b2c              LDR      r3,|L1.200|
000018  6003              STR      r3,[r0,#0]
;;;226    
;;;227    	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
00001a  3814              SUBS     r0,r0,#0x14
;;;228    	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
00001c  6002              STR      r2,[r0,#0]
;;;229    	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
00001e  3820              SUBS     r0,r0,#0x20
;;;230    
;;;231    	return pxTopOfStack;
;;;232    }
000020  4770              BX       lr
;;;233    /*-----------------------------------------------------------*/
                          ENDP

                  vPortSetupTimerInterrupt PROC
;;;620    
;;;621    	void vPortSetupTimerInterrupt( void )
000022  482a              LDR      r0,|L1.204|
;;;622    	{
;;;623    		/* Calculate the constants required to configure the tick interrupt. */
;;;624    		#if configUSE_TICKLESS_IDLE == 1
;;;625    		{
;;;626    			ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
;;;627    			xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
;;;628    			ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
;;;629    		}
;;;630    		#endif /* configUSE_TICKLESS_IDLE */
;;;631    
;;;632    		/* Configure SysTick to interrupt at the requested rate. */
;;;633    		portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
000024  f04f21e0          MOV      r1,#0xe000e000
000028  6148              STR      r0,[r1,#0x14]
;;;634    		portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
00002a  2007              MOVS     r0,#7
00002c  6108              STR      r0,[r1,#0x10]
;;;635    	}
00002e  4770              BX       lr
;;;636    
                          ENDP

                  xPortStartScheduler PROC
;;;291     */
;;;292    BaseType_t xPortStartScheduler( void )
000030  b510              PUSH     {r4,lr}
;;;293    {
;;;294    	#if( configASSERT_DEFINED == 1 )
;;;295    	{
;;;296    		volatile uint32_t ulOriginalPriority;
;;;297    		volatile uint8_t * const pucFirstUserPriorityRegister = ( uint8_t * ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
;;;298    		volatile uint8_t ucMaxPriorityValue;
;;;299    
;;;300    		/* Determine the maximum priority from which ISR safe FreeRTOS API
;;;301    		functions can be called.  ISR safe functions are those that end in
;;;302    		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
;;;303    		ensure interrupt entry is as fast and simple as possible.
;;;304    
;;;305    		Save the interrupt priority value that is about to be clobbered. */
;;;306    		ulOriginalPriority = *pucFirstUserPriorityRegister;
;;;307    
;;;308    		/* Determine the number of priority bits available.  First write to all
;;;309    		possible bits. */
;;;310    		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
;;;311    
;;;312    		/* Read the value back to see how many bits stuck. */
;;;313    		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
;;;314    
;;;315    		/* Use the same mask on the maximum system call priority. */
;;;316    		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
;;;317    
;;;318    		/* Calculate the maximum acceptable priority group value for the number
;;;319    		of bits read back. */
;;;320    		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
;;;321    		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
;;;322    		{
;;;323    			ulMaxPRIGROUPValue--;
;;;324    			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
;;;325    		}
;;;326    
;;;327    		/* Shift the priority group value back to its position within the AIRCR
;;;328    		register. */
;;;329    		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
;;;330    		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
;;;331    
;;;332    		/* Restore the clobbered interrupt priority register to its original
;;;333    		value. */
;;;334    		*pucFirstUserPriorityRegister = ulOriginalPriority;
;;;335    	}
;;;336    	#endif /* conifgASSERT_DEFINED */
;;;337    
;;;338    	/* Make PendSV and SysTick the lowest priority interrupts. */
;;;339    	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
000032  4827              LDR      r0,|L1.208|
000034  6800              LDR      r0,[r0,#0]
000036  f440007f          ORR      r0,r0,#0xff0000
00003a  f04f21e0          MOV      r1,#0xe000e000
00003e  f8c10d20          STR      r0,[r1,#0xd20]
;;;340    	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
000042  4608              MOV      r0,r1
000044  f8d00d20          LDR      r0,[r0,#0xd20]
000048  f040407f          ORR      r0,r0,#0xff000000
00004c  f8c10d20          STR      r0,[r1,#0xd20]
;;;341    
;;;342    	/* Start the timer that generates the tick ISR.  Interrupts are disabled
;;;343    	here already. */
;;;344    	vPortSetupTimerInterrupt();
000050  f7fffffe          BL       vPortSetupTimerInterrupt
;;;345    
;;;346    	/* Initialise the critical nesting count ready for the first task. */
;;;347    	uxCriticalNesting = 0;
000054  2000              MOVS     r0,#0
000056  491f              LDR      r1,|L1.212|
000058  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;348    
;;;349    	/* Start the first task. */
;;;350    	prvStartFirstTask();
00005a  f7fffffe          BL       __asm___6_port_c_39a90d8d__prvStartFirstTask
;;;351    
;;;352    	/* Should not get here! */
;;;353    	return 0;
00005e  2000              MOVS     r0,#0
;;;354    }
000060  bd10              POP      {r4,pc}
;;;355    /*-----------------------------------------------------------*/
                          ENDP

                  vPortEndScheduler PROC
;;;356    
;;;357    void vPortEndScheduler( void )
000062  4770              BX       lr
;;;358    {
;;;359    	/* Not implemented in ports where there is nothing to return to.
;;;360    	Artificially force an assert. */
;;;361    	configASSERT( uxCriticalNesting == 1000UL );
;;;362    }
;;;363    /*-----------------------------------------------------------*/
                          ENDP

                  vPortYield PROC
;;;364    
;;;365    void vPortYield( void )
000064  f04f5080          MOV      r0,#0x10000000
;;;366    {
;;;367    	/* Set a PendSV to request a context switch. */
;;;368    	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
000068  491b              LDR      r1,|L1.216|
00006a  6008              STR      r0,[r1,#0]
;;;369    
;;;370    	/* Barriers are normally not required but do ensure the code is completely
;;;371    	within the specified behaviour for the architecture. */
;;;372    	__dsb( portSY_FULL_READ_WRITE );
00006c  f3bf8f4f          DSB      
;;;373    	__isb( portSY_FULL_READ_WRITE );
000070  f3bf8f6f          ISB      
;;;374    }
000074  4770              BX       lr
;;;375    /*-----------------------------------------------------------*/
                          ENDP

                  vPortEnterCritical PROC
;;;376    
;;;377    void vPortEnterCritical( void )
000076  b510              PUSH     {r4,lr}
;;;378    {
;;;379    	portDISABLE_INTERRUPTS();
000078  f7fffffe          BL       ulPortSetInterruptMask
;;;380    	uxCriticalNesting++;
00007c  4815              LDR      r0,|L1.212|
00007e  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000080  1c40              ADDS     r0,r0,#1
000082  4914              LDR      r1,|L1.212|
000084  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;381    	__dsb( portSY_FULL_READ_WRITE );
000086  f3bf8f4f          DSB      
;;;382    	__isb( portSY_FULL_READ_WRITE );
00008a  f3bf8f6f          ISB      
;;;383    
;;;384    	/* This is not the interrupt safe version of the enter critical function so
;;;385    	assert() if it is being called from an interrupt context.  Only API
;;;386    	functions that end in "FromISR" can be used in an interrupt.  Only assert if
;;;387    	the critical nesting count is 1 to protect against recursive calls if the
;;;388    	assert function also uses a critical section. */
;;;389    	if( uxCriticalNesting == 1 )
;;;390    	{
;;;391    		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
;;;392    	}
;;;393    }
00008e  bd10              POP      {r4,pc}
;;;394    /*-----------------------------------------------------------*/
                          ENDP

                  vPortExitCritical PROC
;;;395    
;;;396    void vPortExitCritical( void )
000090  b510              PUSH     {r4,lr}
;;;397    {
;;;398    	configASSERT( uxCriticalNesting );
;;;399    	uxCriticalNesting--;
000092  4810              LDR      r0,|L1.212|
000094  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000096  1e40              SUBS     r0,r0,#1
000098  490e              LDR      r1,|L1.212|
00009a  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;400    	if( uxCriticalNesting == 0 )
00009c  4608              MOV      r0,r1
00009e  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
0000a0  b910              CBNZ     r0,|L1.168|
;;;401    	{
;;;402    		portENABLE_INTERRUPTS();
0000a2  2000              MOVS     r0,#0
0000a4  f7fffffe          BL       vPortClearInterruptMask
                  |L1.168|
;;;403    	}
;;;404    }
0000a8  bd10              POP      {r4,pc}
;;;405    /*-----------------------------------------------------------*/
                          ENDP

                  xPortSysTickHandler PROC
;;;441    
;;;442    void xPortSysTickHandler( void )
0000aa  b510              PUSH     {r4,lr}
;;;443    {
;;;444    	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
;;;445    	executes all interrupts must be unmasked.  There is therefore no need to
;;;446    	save and then restore the interrupt mask value as its value is already
;;;447    	known. */
;;;448    	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
0000ac  f7fffffe          BL       ulPortSetInterruptMask
;;;449    	{
;;;450    		/* Increment the RTOS tick. */
;;;451    		if( xTaskIncrementTick() != pdFALSE )
0000b0  f7fffffe          BL       xTaskIncrementTick
0000b4  b118              CBZ      r0,|L1.190|
;;;452    		{
;;;453    			/* A context switch is required.  Context switching is performed in
;;;454    			the PendSV interrupt.  Pend the PendSV interrupt. */
;;;455    			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
0000b6  f04f5080          MOV      r0,#0x10000000
0000ba  4907              LDR      r1,|L1.216|
0000bc  6008              STR      r0,[r1,#0]
                  |L1.190|
;;;456    		}
;;;457    	}
;;;458    	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
0000be  2000              MOVS     r0,#0
0000c0  f7fffffe          BL       vPortClearInterruptMask
;;;459    }
0000c4  bd10              POP      {r4,pc}
;;;460    /*-----------------------------------------------------------*/
                          ENDP

0000c6  0000              DCW      0x0000
                  |L1.200|
                          DCD      prvTaskExitError
                  |L1.204|
                          DCD      0x0001193f
                  |L1.208|
                          DCD      0xe000ed20
                  |L1.212|
                          DCD      uxCriticalNesting
                  |L1.216|
                          DCD      0xe000ed04

                          AREA ||.data||, DATA, ALIGN=2

                  uxCriticalNesting
                          DCD      0xaaaaaaaa

;*** Start embedded assembler ***

#line 1 "..\\FreeRTOS\\Source\\portable\\RVDS\\ARM_CM3\\port.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |vPortSVCHandler|
#line 249
|vPortSVCHandler| PROC
#line 250

 PRESERVE8

 ldr r3, =pxCurrentTCB  
 ldr r1, [r3]  
 ldr r0, [r1]  
 ldmia r0!, {r4-r11}  
 msr psp, r0  
 isb
 mov r0, #0
 msr basepri, r0
 orr r14, #0xd
 bx r14
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_port_c_39a90d8d__prvStartFirstTask|
#line 266
|__asm___6_port_c_39a90d8d__prvStartFirstTask| PROC
#line 267

 PRESERVE8

 
 ldr r0, =0xE000ED08
 ldr r0, [r0]
 ldr r0, [r0]

 
 msr msp, r0
 
 cpsie i
 cpsie f
 dsb
 isb
 
 svc 0
 nop
 nop
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |xPortPendSVHandler|
#line 407
|xPortPendSVHandler| PROC
#line 408

 extern uxCriticalNesting
 extern pxCurrentTCB
 extern vTaskSwitchContext

 PRESERVE8

 mrs r0, psp
 isb

 ldr r3, =pxCurrentTCB  
 ldr r2, [r3]

 stmdb r0!, {r4-r11}  
 str r0, [r2]  

 stmdb sp!, {r3, r14}
 mov r0, #191
 msr basepri, r0
 bl vTaskSwitchContext
 mov r0, #0
 msr basepri, r0
 ldmia sp!, {r3, r14}

 ldr r1, [r3]
 ldr r0, [r1]  
 ldmia r0!, {r4-r11}  
 msr psp, r0
 isb
 bx r14
 nop
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |ulPortSetInterruptMask|
#line 640
|ulPortSetInterruptMask| PROC
#line 641

 PRESERVE8

 mrs r0, basepri
 mov r1, #191
 msr basepri, r1
 bx r14
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |vPortClearInterruptMask|
#line 651
|vPortClearInterruptMask| PROC
#line 652

 PRESERVE8

 msr basepri, r0
 bx r14
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |vPortGetIPSR|
#line 660
|vPortGetIPSR| PROC
#line 661

 PRESERVE8

 mrs r0, ipsr
 bx r14
	ENDP

;*** End   embedded assembler ***
