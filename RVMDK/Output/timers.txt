; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Output\timers.o --depend=.\Output\timers.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\User -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\FreeRTOS\Source\include -I..\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\RVMDK -ID:\keil\ARM\INC -ID:\keil\ARM\INC\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Output\timers.crf ..\FreeRTOS\Source\timers.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  prvInsertTimerInActiveList PROC
;;;553    
;;;554    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;555    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;556    BaseType_t xProcessTimerNow = pdFALSE;
00000c  f04f0800          MOV      r8,#0
;;;557    
;;;558    	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
000010  6065              STR      r5,[r4,#4]
;;;559    	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
000012  6124              STR      r4,[r4,#0x10]
;;;560    
;;;561    	if( xNextExpiryTime <= xTimeNow )
000014  42b5              CMP      r5,r6
000016  d80c              BHI      |L1.50|
;;;562    	{
;;;563    		/* Has the expiry time elapsed between the command to start/reset a
;;;564    		timer was issued, and the time the command was processed? */
;;;565    		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
000018  1bf0              SUBS     r0,r6,r7
00001a  69a1              LDR      r1,[r4,#0x18]
00001c  4288              CMP      r0,r1
00001e  d302              BCC      |L1.38|
;;;566    		{
;;;567    			/* The time between a command being issued and the command being
;;;568    			processed actually exceeds the timers period.  */
;;;569    			xProcessTimerNow = pdTRUE;
000020  f04f0801          MOV      r8,#1
000024  e011              B        |L1.74|
                  |L1.38|
;;;570    		}
;;;571    		else
;;;572    		{
;;;573    			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
000026  1d21              ADDS     r1,r4,#4
000028  48ed              LDR      r0,|L1.992|
00002a  6800              LDR      r0,[r0,#0]  ; pxOverflowTimerList
00002c  f7fffffe          BL       vListInsert
000030  e00b              B        |L1.74|
                  |L1.50|
;;;574    		}
;;;575    	}
;;;576    	else
;;;577    	{
;;;578    		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
000032  42be              CMP      r6,r7
000034  d204              BCS      |L1.64|
000036  42bd              CMP      r5,r7
000038  d302              BCC      |L1.64|
;;;579    		{
;;;580    			/* If, since the command was issued, the tick count has overflowed
;;;581    			but the expiry time has not, then the timer must have already passed
;;;582    			its expiry time and should be processed immediately. */
;;;583    			xProcessTimerNow = pdTRUE;
00003a  f04f0801          MOV      r8,#1
00003e  e004              B        |L1.74|
                  |L1.64|
;;;584    		}
;;;585    		else
;;;586    		{
;;;587    			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
000040  1d21              ADDS     r1,r4,#4
000042  48e8              LDR      r0,|L1.996|
000044  6800              LDR      r0,[r0,#0]  ; pxCurrentTimerList
000046  f7fffffe          BL       vListInsert
                  |L1.74|
;;;588    		}
;;;589    	}
;;;590    
;;;591    	return xProcessTimerNow;
00004a  4640              MOV      r0,r8
;;;592    }
00004c  e8bd81f0          POP      {r4-r8,pc}
;;;593    /*-----------------------------------------------------------*/
                          ENDP

                  xTimerGenericCommand PROC
;;;315    
;;;316    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
000050  e92d43fe          PUSH     {r1-r9,lr}
;;;317    {
000054  4605              MOV      r5,r0
000056  460c              MOV      r4,r1
000058  4616              MOV      r6,r2
00005a  461f              MOV      r7,r3
00005c  f8dd8028          LDR      r8,[sp,#0x28]
;;;318    BaseType_t xReturn = pdFAIL;
000060  f04f0900          MOV      r9,#0
;;;319    DaemonTaskMessage_t xMessage;
;;;320    
;;;321    	configASSERT( xTimer );
;;;322    
;;;323    	/* Send a message to the timer service task to perform a particular action
;;;324    	on a particular timer definition. */
;;;325    	if( xTimerQueue != NULL )
000064  48e0              LDR      r0,|L1.1000|
000066  6800              LDR      r0,[r0,#0]  ; xTimerQueue
000068  b310              CBZ      r0,|L1.176|
;;;326    	{
;;;327    		/* Send a command to the timer service task to start the xTimer timer. */
;;;328    		xMessage.xMessageID = xCommandID;
00006a  9400              STR      r4,[sp,#0]
;;;329    		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
00006c  9601              STR      r6,[sp,#4]
;;;330    		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
00006e  9502              STR      r5,[sp,#8]
;;;331    
;;;332    		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
000070  2c06              CMP      r4,#6
000072  da15              BGE      |L1.160|
;;;333    		{
;;;334    			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
000074  f7fffffe          BL       xTaskGetSchedulerState
000078  2802              CMP      r0,#2
00007a  d108              BNE      |L1.142|
;;;335    			{
;;;336    				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
00007c  2300              MOVS     r3,#0
00007e  4642              MOV      r2,r8
000080  4669              MOV      r1,sp
000082  48d9              LDR      r0,|L1.1000|
000084  6800              LDR      r0,[r0,#0]  ; xTimerQueue
000086  f7fffffe          BL       xQueueGenericSend
00008a  4681              MOV      r9,r0
00008c  e010              B        |L1.176|
                  |L1.142|
;;;337    			}
;;;338    			else
;;;339    			{
;;;340    				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
00008e  2300              MOVS     r3,#0
000090  461a              MOV      r2,r3
000092  4669              MOV      r1,sp
000094  48d4              LDR      r0,|L1.1000|
000096  6800              LDR      r0,[r0,#0]  ; xTimerQueue
000098  f7fffffe          BL       xQueueGenericSend
00009c  4681              MOV      r9,r0
00009e  e007              B        |L1.176|
                  |L1.160|
;;;341    			}
;;;342    		}
;;;343    		else
;;;344    		{
;;;345    			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
0000a0  2300              MOVS     r3,#0
0000a2  463a              MOV      r2,r7
0000a4  4669              MOV      r1,sp
0000a6  48d0              LDR      r0,|L1.1000|
0000a8  6800              LDR      r0,[r0,#0]  ; xTimerQueue
0000aa  f7fffffe          BL       xQueueGenericSendFromISR
0000ae  4681              MOV      r9,r0
                  |L1.176|
;;;346    		}
;;;347    
;;;348    		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
;;;349    	}
;;;350    	else
;;;351    	{
;;;352    		mtCOVERAGE_TEST_MARKER();
;;;353    	}
;;;354    
;;;355    	return xReturn;
0000b0  4648              MOV      r0,r9
;;;356    }
0000b2  e8bd83fe          POP      {r1-r9,pc}
;;;357    /*-----------------------------------------------------------*/
                          ENDP

                  prvSwitchTimerLists PROC
;;;720    
;;;721    static void prvSwitchTimerLists( void )
0000b6  e92d43f8          PUSH     {r3-r9,lr}
;;;722    {
;;;723    TickType_t xNextExpireTime, xReloadTime;
;;;724    List_t *pxTemp;
;;;725    Timer_t *pxTimer;
;;;726    BaseType_t xResult;
;;;727    
;;;728    	/* The tick count has overflowed.  The timer lists must be switched.
;;;729    	If there are any timers still referenced from the current timer list
;;;730    	then they must have expired and should be processed before the lists
;;;731    	are switched. */
;;;732    	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
0000ba  e025              B        |L1.264|
                  |L1.188|
;;;733    	{
;;;734    		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
0000bc  48c9              LDR      r0,|L1.996|
0000be  6800              LDR      r0,[r0,#0]  ; pxCurrentTimerList
0000c0  68c0              LDR      r0,[r0,#0xc]
0000c2  6805              LDR      r5,[r0,#0]
;;;735    
;;;736    		/* Remove the timer from the list. */
;;;737    		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
0000c4  48c7              LDR      r0,|L1.996|
0000c6  6800              LDR      r0,[r0,#0]  ; pxCurrentTimerList
0000c8  68c0              LDR      r0,[r0,#0xc]
0000ca  68c4              LDR      r4,[r0,#0xc]
;;;738    		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
0000cc  1d20              ADDS     r0,r4,#4
0000ce  f7fffffe          BL       uxListRemove
;;;739    		traceTIMER_EXPIRED( pxTimer );
;;;740    
;;;741    		/* Execute its callback, then send a command to restart the timer if
;;;742    		it is an auto-reload timer.  It cannot be restarted here as the lists
;;;743    		have not yet been switched. */
;;;744    		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
0000d2  4620              MOV      r0,r4
0000d4  6a61              LDR      r1,[r4,#0x24]
0000d6  4788              BLX      r1
;;;745    
;;;746    		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
0000d8  69e0              LDR      r0,[r4,#0x1c]
0000da  2801              CMP      r0,#1
0000dc  d114              BNE      |L1.264|
;;;747    		{
;;;748    			/* Calculate the reload value, and if the reload value results in
;;;749    			the timer going into the same timer list then it has already expired
;;;750    			and the timer should be re-inserted into the current list so it is
;;;751    			processed again within this loop.  Otherwise a command should be sent
;;;752    			to restart the timer to ensure it is only inserted into a list after
;;;753    			the lists have been swapped. */
;;;754    			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
0000de  69a0              LDR      r0,[r4,#0x18]
0000e0  1946              ADDS     r6,r0,r5
;;;755    			if( xReloadTime > xNextExpireTime )
0000e2  42ae              CMP      r6,r5
0000e4  d907              BLS      |L1.246|
;;;756    			{
;;;757    				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
0000e6  6066              STR      r6,[r4,#4]
;;;758    				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
0000e8  6124              STR      r4,[r4,#0x10]
;;;759    				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
0000ea  1d21              ADDS     r1,r4,#4
0000ec  48bd              LDR      r0,|L1.996|
0000ee  6800              LDR      r0,[r0,#0]  ; pxCurrentTimerList
0000f0  f7fffffe          BL       vListInsert
0000f4  e008              B        |L1.264|
                  |L1.246|
;;;760    			}
;;;761    			else
;;;762    			{
;;;763    				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
0000f6  2300              MOVS     r3,#0
0000f8  462a              MOV      r2,r5
0000fa  4619              MOV      r1,r3
0000fc  4620              MOV      r0,r4
0000fe  9300              STR      r3,[sp,#0]
000100  f7fffffe          BL       xTimerGenericCommand
000104  4680              MOV      r8,r0
;;;764    				configASSERT( xResult );
;;;765    				( void ) xResult;
000106  bf00              NOP      
                  |L1.264|
000108  48b6              LDR      r0,|L1.996|
00010a  6800              LDR      r0,[r0,#0]            ;732  ; pxCurrentTimerList
00010c  6800              LDR      r0,[r0,#0]            ;732
00010e  b908              CBNZ     r0,|L1.276|
000110  2001              MOVS     r0,#1                 ;732
000112  e000              B        |L1.278|
                  |L1.276|
000114  2000              MOVS     r0,#0                 ;732
                  |L1.278|
000116  2800              CMP      r0,#0                 ;732
000118  d0d0              BEQ      |L1.188|
;;;766    			}
;;;767    		}
;;;768    		else
;;;769    		{
;;;770    			mtCOVERAGE_TEST_MARKER();
;;;771    		}
;;;772    	}
;;;773    
;;;774    	pxTemp = pxCurrentTimerList;
00011a  48b2              LDR      r0,|L1.996|
00011c  6807              LDR      r7,[r0,#0]  ; pxCurrentTimerList
;;;775    	pxCurrentTimerList = pxOverflowTimerList;
00011e  48b0              LDR      r0,|L1.992|
000120  6800              LDR      r0,[r0,#0]  ; pxOverflowTimerList
000122  49b0              LDR      r1,|L1.996|
000124  6008              STR      r0,[r1,#0]  ; pxCurrentTimerList
;;;776    	pxOverflowTimerList = pxTemp;
000126  48ae              LDR      r0,|L1.992|
000128  6007              STR      r7,[r0,#0]  ; pxOverflowTimerList
;;;777    }
00012a  e8bd83f8          POP      {r3-r9,pc}
;;;778    /*-----------------------------------------------------------*/
                          ENDP

                  prvSampleTimeNow PROC
;;;530    
;;;531    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
00012e  b570              PUSH     {r4-r6,lr}
;;;532    {
000130  4604              MOV      r4,r0
;;;533    TickType_t xTimeNow;
;;;534    PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */
;;;535    
;;;536    	xTimeNow = xTaskGetTickCount();
000132  f7fffffe          BL       xTaskGetTickCount
000136  4605              MOV      r5,r0
;;;537    
;;;538    	if( xTimeNow < xLastTime )
000138  48ac              LDR      r0,|L1.1004|
00013a  6800              LDR      r0,[r0,#0]  ; xLastTime
00013c  4285              CMP      r5,r0
00013e  d204              BCS      |L1.330|
;;;539    	{
;;;540    		prvSwitchTimerLists();
000140  f7fffffe          BL       prvSwitchTimerLists
;;;541    		*pxTimerListsWereSwitched = pdTRUE;
000144  2001              MOVS     r0,#1
000146  6020              STR      r0,[r4,#0]
000148  e001              B        |L1.334|
                  |L1.330|
;;;542    	}
;;;543    	else
;;;544    	{
;;;545    		*pxTimerListsWereSwitched = pdFALSE;
00014a  2000              MOVS     r0,#0
00014c  6020              STR      r0,[r4,#0]
                  |L1.334|
;;;546    	}
;;;547    
;;;548    	xLastTime = xTimeNow;
00014e  48a7              LDR      r0,|L1.1004|
000150  6005              STR      r5,[r0,#0]  ; xLastTime
;;;549    
;;;550    	return xTimeNow;
000152  4628              MOV      r0,r5
;;;551    }
000154  bd70              POP      {r4-r6,pc}
;;;552    /*-----------------------------------------------------------*/
                          ENDP

                  prvProcessReceivedCommands PROC
;;;594    
;;;595    static void	prvProcessReceivedCommands( void )
000156  b570              PUSH     {r4-r6,lr}
;;;596    {
000158  b086              SUB      sp,sp,#0x18
;;;597    DaemonTaskMessage_t xMessage;
;;;598    Timer_t *pxTimer;
;;;599    BaseType_t xTimerListsWereSwitched, xResult;
;;;600    TickType_t xTimeNow;
;;;601    
;;;602    	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
00015a  e04d              B        |L1.504|
                  |L1.348|
;;;603    	{
;;;604    		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
;;;605    		{
;;;606    			/* Negative commands are pended function calls rather than timer
;;;607    			commands. */
;;;608    			if( xMessage.xMessageID < ( BaseType_t ) 0 )
;;;609    			{
;;;610    				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
;;;611    
;;;612    				/* The timer uses the xCallbackParameters member to request a
;;;613    				callback be executed.  Check the callback is not NULL. */
;;;614    				configASSERT( pxCallback );
;;;615    
;;;616    				/* Call the function. */
;;;617    				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
;;;618    			}
;;;619    			else
;;;620    			{
;;;621    				mtCOVERAGE_TEST_MARKER();
;;;622    			}
;;;623    		}
;;;624    		#endif /* INCLUDE_xTimerPendFunctionCall */
;;;625    
;;;626    		/* Commands that are positive are timer commands rather than pended
;;;627    		function calls. */
;;;628    		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
00015c  9803              LDR      r0,[sp,#0xc]
00015e  2800              CMP      r0,#0
000160  db4a              BLT      |L1.504|
;;;629    		{
;;;630    			/* The messages uses the xTimerParameters member to work on a
;;;631    			software timer. */
;;;632    			pxTimer = xMessage.u.xTimerParameters.pxTimer;
000162  9c05              LDR      r4,[sp,#0x14]
;;;633    
;;;634    			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
000164  6960              LDR      r0,[r4,#0x14]
000166  b908              CBNZ     r0,|L1.364|
000168  2001              MOVS     r0,#1
00016a  e000              B        |L1.366|
                  |L1.364|
00016c  2000              MOVS     r0,#0
                  |L1.366|
00016e  b910              CBNZ     r0,|L1.374|
;;;635    			{
;;;636    				/* The timer is in a list, remove it. */
;;;637    				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
000170  1d20              ADDS     r0,r4,#4
000172  f7fffffe          BL       uxListRemove
                  |L1.374|
;;;638    			}
;;;639    			else
;;;640    			{
;;;641    				mtCOVERAGE_TEST_MARKER();
;;;642    			}
;;;643    
;;;644    			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageValue );
;;;645    
;;;646    			/* In this case the xTimerListsWereSwitched parameter is not used, but
;;;647    			it must be present in the function call.  prvSampleTimeNow() must be
;;;648    			called after the message is received from xTimerQueue so there is no
;;;649    			possibility of a higher priority task adding a message to the message
;;;650    			queue with a time that is ahead of the timer daemon task (because it
;;;651    			pre-empted the timer daemon task after the xTimeNow value was set). */
;;;652    			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
000176  a802              ADD      r0,sp,#8
000178  f7fffffe          BL       prvSampleTimeNow
00017c  4605              MOV      r5,r0
;;;653    
;;;654    			switch( xMessage.xMessageID )
00017e  9803              LDR      r0,[sp,#0xc]
000180  280a              CMP      r0,#0xa
000182  d237              BCS      |L1.500|
000184  e8dff000          TBB      [pc,r0]
000188  09050725          DCB      0x09,0x05,0x07,0x25
00018c  27320608          DCB      0x27,0x32,0x06,0x08
000190  2628              DCB      0x26,0x28
;;;655    			{
;;;656    				case tmrCOMMAND_START :
;;;657    			    case tmrCOMMAND_START_FROM_ISR :
000192  bf00              NOP      
;;;658    			    case tmrCOMMAND_RESET :
000194  bf00              NOP      
;;;659    			    case tmrCOMMAND_RESET_FROM_ISR :
000196  bf00              NOP      
;;;660    				case tmrCOMMAND_START_DONT_TRACE :
000198  bf00              NOP      
;;;661    					/* Start or restart a timer. */
;;;662    					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
00019a  9804              LDR      r0,[sp,#0x10]
00019c  69a2              LDR      r2,[r4,#0x18]
00019e  1881              ADDS     r1,r0,r2
0001a0  4603              MOV      r3,r0
0001a2  462a              MOV      r2,r5
0001a4  4620              MOV      r0,r4
0001a6  f7fffffe          BL       prvInsertTimerInActiveList
0001aa  2801              CMP      r0,#1
0001ac  d110              BNE      |L1.464|
;;;663    					{
;;;664    						/* The timer expired before it was added to the active
;;;665    						timer list.  Process it now. */
;;;666    						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
0001ae  4620              MOV      r0,r4
0001b0  6a61              LDR      r1,[r4,#0x24]
0001b2  4788              BLX      r1
;;;667    						traceTIMER_EXPIRED( pxTimer );
;;;668    
;;;669    						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
0001b4  69e0              LDR      r0,[r4,#0x1c]
0001b6  2801              CMP      r0,#1
0001b8  d10a              BNE      |L1.464|
;;;670    						{
;;;671    							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
0001ba  2300              MOVS     r3,#0
0001bc  9300              STR      r3,[sp,#0]
0001be  9804              LDR      r0,[sp,#0x10]
0001c0  69a1              LDR      r1,[r4,#0x18]
0001c2  1842              ADDS     r2,r0,r1
0001c4  4619              MOV      r1,r3
0001c6  4620              MOV      r0,r4
0001c8  f7fffffe          BL       xTimerGenericCommand
0001cc  4606              MOV      r6,r0
;;;672    							configASSERT( xResult );
;;;673    							( void ) xResult;
0001ce  bf00              NOP      
                  |L1.464|
;;;674    						}
;;;675    						else
;;;676    						{
;;;677    							mtCOVERAGE_TEST_MARKER();
;;;678    						}
;;;679    					}
;;;680    					else
;;;681    					{
;;;682    						mtCOVERAGE_TEST_MARKER();
;;;683    					}
;;;684    					break;
0001d0  e011              B        |L1.502|
;;;685    
;;;686    				case tmrCOMMAND_STOP :
;;;687    				case tmrCOMMAND_STOP_FROM_ISR :
0001d2  bf00              NOP      
;;;688    					/* The timer has already been removed from the active list.
;;;689    					There is nothing to do here. */
;;;690    					break;
0001d4  e00f              B        |L1.502|
;;;691    
;;;692    				case tmrCOMMAND_CHANGE_PERIOD :
;;;693    				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
0001d6  bf00              NOP      
;;;694    					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
0001d8  9804              LDR      r0,[sp,#0x10]
0001da  61a0              STR      r0,[r4,#0x18]
;;;695    					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
;;;696    
;;;697    					/* The new period does not really have a reference, and can be
;;;698    					longer or shorter than the old one.  The command time is
;;;699    					therefore set to the current time, and as the period cannot be
;;;700    					zero the next expiry time can only be in the future, meaning
;;;701    					(unlike for the xTimerStart() case above) there is no fail case
;;;702    					that needs to be handled here. */
;;;703    					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
0001dc  69a0              LDR      r0,[r4,#0x18]
0001de  1941              ADDS     r1,r0,r5
0001e0  462b              MOV      r3,r5
0001e2  462a              MOV      r2,r5
0001e4  4620              MOV      r0,r4
0001e6  f7fffffe          BL       prvInsertTimerInActiveList
;;;704    					break;
0001ea  e004              B        |L1.502|
;;;705    
;;;706    				case tmrCOMMAND_DELETE :
;;;707    					/* The timer has already been removed from the active list,
;;;708    					just free up the memory. */
;;;709    					vPortFree( pxTimer );
0001ec  4620              MOV      r0,r4
0001ee  f7fffffe          BL       vPortFree
;;;710    					break;
0001f2  e000              B        |L1.502|
                  |L1.500|
;;;711    
;;;712    				default	:
;;;713    					/* Don't expect to get here. */
;;;714    					break;
0001f4  bf00              NOP      
                  |L1.502|
0001f6  bf00              NOP                            ;684
                  |L1.504|
0001f8  2300              MOVS     r3,#0                 ;602
0001fa  461a              MOV      r2,r3                 ;602
0001fc  a903              ADD      r1,sp,#0xc            ;602
0001fe  487a              LDR      r0,|L1.1000|
000200  6800              LDR      r0,[r0,#0]            ;602  ; xTimerQueue
000202  f7fffffe          BL       xQueueGenericReceive
000206  2800              CMP      r0,#0                 ;602
000208  d1a8              BNE      |L1.348|
;;;715    			}
;;;716    		}
;;;717    	}
;;;718    }
00020a  b006              ADD      sp,sp,#0x18
00020c  bd70              POP      {r4-r6,pc}
;;;719    /*-----------------------------------------------------------*/
                          ENDP

                  prvProcessExpiredTimer PROC
;;;380    
;;;381    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
00020e  b5f8              PUSH     {r3-r7,lr}
;;;382    {
000210  4605              MOV      r5,r0
000212  460e              MOV      r6,r1
;;;383    BaseType_t xResult;
;;;384    Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
000214  4873              LDR      r0,|L1.996|
000216  6800              LDR      r0,[r0,#0]  ; pxCurrentTimerList
000218  68c0              LDR      r0,[r0,#0xc]
00021a  68c4              LDR      r4,[r0,#0xc]
;;;385    
;;;386    	/* Remove the timer from the list of active timers.  A check has already
;;;387    	been performed to ensure the list is not empty. */
;;;388    	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
00021c  1d20              ADDS     r0,r4,#4
00021e  f7fffffe          BL       uxListRemove
;;;389    	traceTIMER_EXPIRED( pxTimer );
;;;390    
;;;391    	/* If the timer is an auto reload timer then calculate the next
;;;392    	expiry time and re-insert the timer in the list of active timers. */
;;;393    	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
000222  69e0              LDR      r0,[r4,#0x1c]
000224  2801              CMP      r0,#1
000226  d111              BNE      |L1.588|
;;;394    	{
;;;395    		/* The timer is inserted into a list using a time relative to anything
;;;396    		other than the current time.  It will therefore be inserted into the
;;;397    		correct list relative to the time this task thinks it is now. */
;;;398    		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
000228  69a0              LDR      r0,[r4,#0x18]
00022a  1941              ADDS     r1,r0,r5
00022c  462b              MOV      r3,r5
00022e  4632              MOV      r2,r6
000230  4620              MOV      r0,r4
000232  f7fffffe          BL       prvInsertTimerInActiveList
000236  2801              CMP      r0,#1
000238  d108              BNE      |L1.588|
;;;399    		{
;;;400    			/* The timer expired before it was added to the active timer
;;;401    			list.  Reload it now.  */
;;;402    			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
00023a  2300              MOVS     r3,#0
00023c  462a              MOV      r2,r5
00023e  4619              MOV      r1,r3
000240  4620              MOV      r0,r4
000242  9300              STR      r3,[sp,#0]
000244  f7fffffe          BL       xTimerGenericCommand
000248  4607              MOV      r7,r0
;;;403    			configASSERT( xResult );
;;;404    			( void ) xResult;
00024a  bf00              NOP      
                  |L1.588|
;;;405    		}
;;;406    		else
;;;407    		{
;;;408    			mtCOVERAGE_TEST_MARKER();
;;;409    		}
;;;410    	}
;;;411    	else
;;;412    	{
;;;413    		mtCOVERAGE_TEST_MARKER();
;;;414    	}
;;;415    
;;;416    	/* Call the timer callback. */
;;;417    	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
00024c  4620              MOV      r0,r4
00024e  6a61              LDR      r1,[r4,#0x24]
000250  4788              BLX      r1
;;;418    }
000252  bdf8              POP      {r3-r7,pc}
;;;419    /*-----------------------------------------------------------*/
                          ENDP

                  prvProcessTimerOrBlockTask PROC
;;;444    
;;;445    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
000254  b5f8              PUSH     {r3-r7,lr}
;;;446    {
000256  4605              MOV      r5,r0
000258  460c              MOV      r4,r1
;;;447    TickType_t xTimeNow;
;;;448    BaseType_t xTimerListsWereSwitched;
;;;449    
;;;450    	vTaskSuspendAll();
00025a  f7fffffe          BL       vTaskSuspendAll
;;;451    	{
;;;452    		/* Obtain the time now to make an assessment as to whether the timer
;;;453    		has expired or not.  If obtaining the time causes the lists to switch
;;;454    		then don't process this timer as any timers that remained in the list
;;;455    		when the lists were switched will have been processed within the
;;;456    		prvSampleTimeNow() function. */
;;;457    		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
00025e  4668              MOV      r0,sp
000260  f7fffffe          BL       prvSampleTimeNow
000264  4606              MOV      r6,r0
;;;458    		if( xTimerListsWereSwitched == pdFALSE )
000266  9800              LDR      r0,[sp,#0]
000268  b9f0              CBNZ     r0,|L1.680|
;;;459    		{
;;;460    			/* The tick count has not overflowed, has the timer expired? */
;;;461    			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
00026a  b944              CBNZ     r4,|L1.638|
00026c  42b5              CMP      r5,r6
00026e  d806              BHI      |L1.638|
;;;462    			{
;;;463    				( void ) xTaskResumeAll();
000270  f7fffffe          BL       xTaskResumeAll
;;;464    				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
000274  4631              MOV      r1,r6
000276  4628              MOV      r0,r5
000278  f7fffffe          BL       prvProcessExpiredTimer
00027c  e016              B        |L1.684|
                  |L1.638|
;;;465    			}
;;;466    			else
;;;467    			{
;;;468    				/* The tick count has not overflowed, and the next expire
;;;469    				time has not been reached yet.  This task should therefore
;;;470    				block to wait for the next expire time or a command to be
;;;471    				received - whichever comes first.  The following line cannot
;;;472    				be reached unless xNextExpireTime > xTimeNow, except in the
;;;473    				case when the current timer list is empty. */
;;;474    				if( xListWasEmpty != pdFALSE )
00027e  b13c              CBZ      r4,|L1.656|
;;;475    				{
;;;476    					/* The current timer list is empty - is the overflow list
;;;477    					also empty? */
;;;478    					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
000280  4857              LDR      r0,|L1.992|
000282  6800              LDR      r0,[r0,#0]  ; pxOverflowTimerList
000284  6800              LDR      r0,[r0,#0]
000286  b908              CBNZ     r0,|L1.652|
000288  2001              MOVS     r0,#1
00028a  e000              B        |L1.654|
                  |L1.652|
00028c  2000              MOVS     r0,#0
                  |L1.654|
00028e  4604              MOV      r4,r0
                  |L1.656|
;;;479    				}
;;;480    
;;;481    				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
000290  1ba9              SUBS     r1,r5,r6
000292  4622              MOV      r2,r4
000294  4854              LDR      r0,|L1.1000|
000296  6800              LDR      r0,[r0,#0]  ; xTimerQueue
000298  f7fffffe          BL       vQueueWaitForMessageRestricted
;;;482    
;;;483    				if( xTaskResumeAll() == pdFALSE )
00029c  f7fffffe          BL       xTaskResumeAll
0002a0  b920              CBNZ     r0,|L1.684|
;;;484    				{
;;;485    					/* Yield to wait for either a command to arrive, or the
;;;486    					block time to expire.  If a command arrived between the
;;;487    					critical section being exited and this yield then the yield
;;;488    					will not cause the task to block. */
;;;489    					portYIELD_WITHIN_API();
0002a2  f7fffffe          BL       vPortYield
0002a6  e001              B        |L1.684|
                  |L1.680|
;;;490    				}
;;;491    				else
;;;492    				{
;;;493    					mtCOVERAGE_TEST_MARKER();
;;;494    				}
;;;495    			}
;;;496    		}
;;;497    		else
;;;498    		{
;;;499    			( void ) xTaskResumeAll();
0002a8  f7fffffe          BL       xTaskResumeAll
                  |L1.684|
;;;500    		}
;;;501    	}
;;;502    }
0002ac  bdf8              POP      {r3-r7,pc}
;;;503    /*-----------------------------------------------------------*/
                          ENDP

                  prvGetNextExpireTime PROC
;;;504    
;;;505    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
0002ae  4601              MOV      r1,r0
;;;506    {
;;;507    TickType_t xNextExpireTime;
;;;508    
;;;509    	/* Timers are listed in expiry time order, with the head of the list
;;;510    	referencing the task that will expire first.  Obtain the time at which
;;;511    	the timer with the nearest expiry time will expire.  If there are no
;;;512    	active timers then just set the next expire time to 0.  That will cause
;;;513    	this task to unblock when the tick count overflows, at which point the
;;;514    	timer lists will be switched and the next expiry time can be
;;;515    	re-assessed.  */
;;;516    	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
0002b0  4a4c              LDR      r2,|L1.996|
0002b2  6812              LDR      r2,[r2,#0]  ; pxCurrentTimerList
0002b4  6812              LDR      r2,[r2,#0]
0002b6  b90a              CBNZ     r2,|L1.700|
0002b8  2201              MOVS     r2,#1
0002ba  e000              B        |L1.702|
                  |L1.700|
0002bc  2200              MOVS     r2,#0
                  |L1.702|
0002be  600a              STR      r2,[r1,#0]
;;;517    	if( *pxListWasEmpty == pdFALSE )
0002c0  680a              LDR      r2,[r1,#0]
0002c2  b922              CBNZ     r2,|L1.718|
;;;518    	{
;;;519    		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
0002c4  4a47              LDR      r2,|L1.996|
0002c6  6812              LDR      r2,[r2,#0]  ; pxCurrentTimerList
0002c8  68d2              LDR      r2,[r2,#0xc]
0002ca  6810              LDR      r0,[r2,#0]
0002cc  e000              B        |L1.720|
                  |L1.718|
;;;520    	}
;;;521    	else
;;;522    	{
;;;523    		/* Ensure the task unblocks when the tick count rolls over. */
;;;524    		xNextExpireTime = ( TickType_t ) 0U;
0002ce  2000              MOVS     r0,#0
                  |L1.720|
;;;525    	}
;;;526    
;;;527    	return xNextExpireTime;
;;;528    }
0002d0  4770              BX       lr
;;;529    /*-----------------------------------------------------------*/
                          ENDP

                  prvTimerTask PROC
;;;420    
;;;421    static void prvTimerTask( void *pvParameters )
0002d2  b508              PUSH     {r3,lr}
;;;422    {
;;;423    TickType_t xNextExpireTime;
;;;424    BaseType_t xListWasEmpty;
;;;425    
;;;426    	/* Just to avoid compiler warnings. */
;;;427    	( void ) pvParameters;
;;;428    
;;;429    	for( ;; )
0002d4  bf00              NOP      
                  |L1.726|
;;;430    	{
;;;431    		/* Query the timers list to see if it contains any timers, and if so,
;;;432    		obtain the time at which the next timer will expire. */
;;;433    		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
0002d6  4668              MOV      r0,sp
0002d8  f7fffffe          BL       prvGetNextExpireTime
0002dc  4604              MOV      r4,r0
;;;434    
;;;435    		/* If a timer has expired, process it.  Otherwise, block this task
;;;436    		until either a timer does expire, or a command is received. */
;;;437    		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
0002de  4620              MOV      r0,r4
0002e0  9900              LDR      r1,[sp,#0]
0002e2  f7fffffe          BL       prvProcessTimerOrBlockTask
;;;438    
;;;439    		/* Empty the command queue. */
;;;440    		prvProcessReceivedCommands();
0002e6  f7fffffe          BL       prvProcessReceivedCommands
0002ea  e7f4              B        |L1.726|
;;;441    	}
;;;442    }
;;;443    /*-----------------------------------------------------------*/
                          ENDP

                  prvCheckForValidListAndQueue PROC
;;;779    
;;;780    static void prvCheckForValidListAndQueue( void )
0002ec  b510              PUSH     {r4,lr}
;;;781    {
;;;782    	/* Check that the list from which active timers are referenced, and the
;;;783    	queue used to communicate with the timer service, have been
;;;784    	initialised. */
;;;785    	taskENTER_CRITICAL();
0002ee  f7fffffe          BL       vPortEnterCritical
;;;786    	{
;;;787    		if( xTimerQueue == NULL )
0002f2  483d              LDR      r0,|L1.1000|
0002f4  6800              LDR      r0,[r0,#0]  ; xTimerQueue
0002f6  b990              CBNZ     r0,|L1.798|
;;;788    		{
;;;789    			vListInitialise( &xActiveTimerList1 );
0002f8  483d              LDR      r0,|L1.1008|
0002fa  f7fffffe          BL       vListInitialise
;;;790    			vListInitialise( &xActiveTimerList2 );
0002fe  483d              LDR      r0,|L1.1012|
000300  f7fffffe          BL       vListInitialise
;;;791    			pxCurrentTimerList = &xActiveTimerList1;
000304  483a              LDR      r0,|L1.1008|
000306  4937              LDR      r1,|L1.996|
000308  6008              STR      r0,[r1,#0]  ; pxCurrentTimerList
;;;792    			pxOverflowTimerList = &xActiveTimerList2;
00030a  483a              LDR      r0,|L1.1012|
00030c  4934              LDR      r1,|L1.992|
00030e  6008              STR      r0,[r1,#0]  ; pxOverflowTimerList
;;;793    			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
000310  2200              MOVS     r2,#0
000312  210c              MOVS     r1,#0xc
000314  200a              MOVS     r0,#0xa
000316  f7fffffe          BL       xQueueGenericCreate
00031a  4933              LDR      r1,|L1.1000|
00031c  6008              STR      r0,[r1,#0]  ; xTimerQueue
                  |L1.798|
;;;794    			configASSERT( xTimerQueue );
;;;795    
;;;796    			#if ( configQUEUE_REGISTRY_SIZE > 0 )
;;;797    			{
;;;798    				if( xTimerQueue != NULL )
;;;799    				{
;;;800    					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
;;;801    				}
;;;802    				else
;;;803    				{
;;;804    					mtCOVERAGE_TEST_MARKER();
;;;805    				}
;;;806    			}
;;;807    			#endif /* configQUEUE_REGISTRY_SIZE */
;;;808    		}
;;;809    		else
;;;810    		{
;;;811    			mtCOVERAGE_TEST_MARKER();
;;;812    		}
;;;813    	}
;;;814    	taskEXIT_CRITICAL();
00031e  f7fffffe          BL       vPortExitCritical
;;;815    }
000322  bd10              POP      {r4,pc}
;;;816    /*-----------------------------------------------------------*/
                          ENDP

                  xTimerCreateTimerTask PROC
;;;239    
;;;240    BaseType_t xTimerCreateTimerTask( void )
000324  b51f              PUSH     {r0-r4,lr}
;;;241    {
;;;242    BaseType_t xReturn = pdFAIL;
000326  2400              MOVS     r4,#0
;;;243    
;;;244    	/* This function is called when the scheduler is started if
;;;245    	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
;;;246    	timer service task has been created/initialised.  If timers have already
;;;247    	been created then the initialisation will already have been performed. */
;;;248    	prvCheckForValidListAndQueue();
000328  f7fffffe          BL       prvCheckForValidListAndQueue
;;;249    
;;;250    	if( xTimerQueue != NULL )
00032c  482e              LDR      r0,|L1.1000|
00032e  6800              LDR      r0,[r0,#0]  ; xTimerQueue
000330  b158              CBZ      r0,|L1.842|
;;;251    	{
;;;252    		#if ( INCLUDE_xTimerGetTimerDaemonTaskHandle == 1 )
;;;253    		{
;;;254    			/* Create the timer task, storing its handle in xTimerTaskHandle so
;;;255    			it can be returned by the xTimerGetTimerDaemonTaskHandle() function. */
;;;256    			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
;;;257    		}
;;;258    		#else
;;;259    		{
;;;260    			/* Create the timer task without storing its handle. */
;;;261    			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
000332  2300              MOVS     r3,#0
000334  2004              MOVS     r0,#4
000336  e9cd0300          STRD     r0,r3,[sp,#0]
00033a  9302              STR      r3,[sp,#8]
00033c  0182              LSLS     r2,r0,#6
00033e  a12e              ADR      r1,|L1.1016|
000340  482f              LDR      r0,|L1.1024|
000342  9303              STR      r3,[sp,#0xc]
000344  f7fffffe          BL       xTaskGenericCreate
000348  4604              MOV      r4,r0
                  |L1.842|
;;;262    		}
;;;263    		#endif
;;;264    	}
;;;265    	else
;;;266    	{
;;;267    		mtCOVERAGE_TEST_MARKER();
;;;268    	}
;;;269    
;;;270    	configASSERT( xReturn );
;;;271    	return xReturn;
00034a  4620              MOV      r0,r4
;;;272    }
00034c  b004              ADD      sp,sp,#0x10
00034e  bd10              POP      {r4,pc}
;;;273    /*-----------------------------------------------------------*/
                          ENDP

                  xTimerCreate PROC
;;;274    
;;;275    TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000350  e92d47f0          PUSH     {r4-r10,lr}
;;;276    {
000354  4606              MOV      r6,r0
000356  460d              MOV      r5,r1
000358  4617              MOV      r7,r2
00035a  4698              MOV      r8,r3
00035c  f8dd9020          LDR      r9,[sp,#0x20]
;;;277    Timer_t *pxNewTimer;
;;;278    
;;;279    	/* Allocate the timer structure. */
;;;280    	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
000360  b90d              CBNZ     r5,|L1.870|
;;;281    	{
;;;282    		pxNewTimer = NULL;
000362  2400              MOVS     r4,#0
000364  e010              B        |L1.904|
                  |L1.870|
;;;283    	}
;;;284    	else
;;;285    	{
;;;286    		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
000366  2028              MOVS     r0,#0x28
000368  f7fffffe          BL       pvPortMalloc
00036c  4604              MOV      r4,r0
;;;287    		if( pxNewTimer != NULL )
00036e  b15c              CBZ      r4,|L1.904|
;;;288    		{
;;;289    			/* Ensure the infrastructure used by the timer service task has been
;;;290    			created/initialised. */
;;;291    			prvCheckForValidListAndQueue();
000370  f7fffffe          BL       prvCheckForValidListAndQueue
;;;292    
;;;293    			/* Initialise the timer structure members using the function parameters. */
;;;294    			pxNewTimer->pcTimerName = pcTimerName;
000374  6026              STR      r6,[r4,#0]
;;;295    			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
000376  61a5              STR      r5,[r4,#0x18]
;;;296    			pxNewTimer->uxAutoReload = uxAutoReload;
000378  61e7              STR      r7,[r4,#0x1c]
;;;297    			pxNewTimer->pvTimerID = pvTimerID;
00037a  f8c48020          STR      r8,[r4,#0x20]
;;;298    			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
00037e  f8c49024          STR      r9,[r4,#0x24]
;;;299    			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
000382  1d20              ADDS     r0,r4,#4
000384  f7fffffe          BL       vListInitialiseItem
                  |L1.904|
;;;300    
;;;301    			traceTIMER_CREATE( pxNewTimer );
;;;302    		}
;;;303    		else
;;;304    		{
;;;305    			traceTIMER_CREATE_FAILED();
;;;306    		}
;;;307    	}
;;;308    
;;;309    	/* 0 is not a valid value for xTimerPeriodInTicks. */
;;;310    	configASSERT( ( xTimerPeriodInTicks > 0 ) );
;;;311    
;;;312    	return ( TimerHandle_t ) pxNewTimer;
000388  4620              MOV      r0,r4
;;;313    }
00038a  e8bd87f0          POP      {r4-r10,pc}
;;;314    /*-----------------------------------------------------------*/
                          ENDP

                  pcTimerGetTimerName PROC
;;;371    
;;;372    const char * pcTimerGetTimerName( TimerHandle_t xTimer )
00038e  4601              MOV      r1,r0
;;;373    {
;;;374    Timer_t *pxTimer = ( Timer_t * ) xTimer;
000390  460a              MOV      r2,r1
;;;375    
;;;376    	configASSERT( xTimer );
;;;377    	return pxTimer->pcTimerName;
000392  6810              LDR      r0,[r2,#0]
;;;378    }
000394  4770              BX       lr
;;;379    /*-----------------------------------------------------------*/
                          ENDP

                  xTimerIsTimerActive PROC
;;;817    
;;;818    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
000396  b570              PUSH     {r4-r6,lr}
;;;819    {
000398  4604              MOV      r4,r0
;;;820    BaseType_t xTimerIsInActiveList;
;;;821    Timer_t *pxTimer = ( Timer_t * ) xTimer;
00039a  4626              MOV      r6,r4
;;;822    
;;;823    	configASSERT( xTimer );
;;;824    
;;;825    	/* Is the timer in the list of active timers? */
;;;826    	taskENTER_CRITICAL();
00039c  f7fffffe          BL       vPortEnterCritical
;;;827    	{
;;;828    		/* Checking to see if it is in the NULL list in effect checks to see if
;;;829    		it is referenced from either the current or the overflow timer lists in
;;;830    		one go, but the logic has to be reversed, hence the '!'. */
;;;831    		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
0003a0  6970              LDR      r0,[r6,#0x14]
0003a2  b908              CBNZ     r0,|L1.936|
0003a4  2001              MOVS     r0,#1
0003a6  e000              B        |L1.938|
                  |L1.936|
0003a8  2000              MOVS     r0,#0
                  |L1.938|
0003aa  f0800501          EOR      r5,r0,#1
;;;832    	}
;;;833    	taskEXIT_CRITICAL();
0003ae  f7fffffe          BL       vPortExitCritical
;;;834    
;;;835    	return xTimerIsInActiveList;
0003b2  4628              MOV      r0,r5
;;;836    } /*lint !e818 Can't be pointer to const due to the typedef. */
0003b4  bd70              POP      {r4-r6,pc}
;;;837    /*-----------------------------------------------------------*/
                          ENDP

                  pvTimerGetTimerID PROC
;;;838    
;;;839    void *pvTimerGetTimerID( const TimerHandle_t xTimer )
0003b6  b570              PUSH     {r4-r6,lr}
;;;840    {
0003b8  4604              MOV      r4,r0
;;;841    Timer_t * const pxTimer = ( Timer_t * ) xTimer;
0003ba  4626              MOV      r6,r4
;;;842    void *pvReturn;
;;;843    
;;;844    	configASSERT( xTimer );
;;;845    
;;;846    	taskENTER_CRITICAL();
0003bc  f7fffffe          BL       vPortEnterCritical
;;;847    	{
;;;848    		pvReturn = pxTimer->pvTimerID;
0003c0  6a35              LDR      r5,[r6,#0x20]
;;;849    	}
;;;850    	taskEXIT_CRITICAL();
0003c2  f7fffffe          BL       vPortExitCritical
;;;851    
;;;852    	return pvReturn;
0003c6  4628              MOV      r0,r5
;;;853    }
0003c8  bd70              POP      {r4-r6,pc}
;;;854    /*-----------------------------------------------------------*/
                          ENDP

                  vTimerSetTimerID PROC
;;;855    
;;;856    void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
0003ca  b570              PUSH     {r4-r6,lr}
;;;857    {
0003cc  4604              MOV      r4,r0
0003ce  460d              MOV      r5,r1
;;;858    Timer_t * const pxTimer = ( Timer_t * ) xTimer;
0003d0  4626              MOV      r6,r4
;;;859    
;;;860    	configASSERT( xTimer );
;;;861    
;;;862    	taskENTER_CRITICAL();
0003d2  f7fffffe          BL       vPortEnterCritical
;;;863    	{
;;;864    		pxTimer->pvTimerID = pvNewID;
0003d6  6235              STR      r5,[r6,#0x20]
;;;865    	}
;;;866    	taskEXIT_CRITICAL();
0003d8  f7fffffe          BL       vPortExitCritical
;;;867    }
0003dc  bd70              POP      {r4-r6,pc}
;;;868    /*-----------------------------------------------------------*/
                          ENDP

0003de  0000              DCW      0x0000
                  |L1.992|
                          DCD      pxOverflowTimerList
                  |L1.996|
                          DCD      pxCurrentTimerList
                  |L1.1000|
                          DCD      xTimerQueue
                  |L1.1004|
                          DCD      xLastTime
                  |L1.1008|
                          DCD      xActiveTimerList1
                  |L1.1012|
                          DCD      xActiveTimerList2
                  |L1.1016|
0003f8  546d7220          DCB      "Tmr Svc",0
0003fc  53766300
                  |L1.1024|
                          DCD      prvTimerTask

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  xActiveTimerList1
                          %        20
                  xActiveTimerList2
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  xTimerQueue
                          DCD      0x00000000
                  xLastTime
                          DCD      0x00000000
                  pxCurrentTimerList
                          DCD      0x00000000
                  pxOverflowTimerList
                          DCD      0x00000000
